Solution 1: (Brute-Force)
Approach: Simply count the no. of appearance for each element using nested loops and whenever you find the count of an element greater than N/3 times,
that element will be your answer.

Time Complexity: O(n^2)
Space Complexity: O(1)

Solution 2: Better Solution

Approach: Traverse the whole array and store the count of every element in a map. 
After that traverse through the map and whenever you find the count of an element greater than N/3 times, 
store that element in your answer.

Time Complexity: O(n)
Space Complexity: O(n)

Solution 3: Optimal Solution (Extended Boyer Mooreâ€™s Voting Algorithm)
Time Complexity: O(n)
Space Complexity: O(1)

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        
        int n = nums.size();
        //We are sure that there will be a max of 2 elements which occurs > N/3 times because there cannot be if you do a simple math addition.

        int ele1 = -1, ele2 = -1, c1 = 0, c2 = 0;

        for(int i=0; i<n ; i++)
        {
            if(ele1 == nums[i])
                c1++;

            else if(ele2 == nums[i])
                c2++;

            else if(c1 == 0)
            {
                ele1 = nums[i];
                c1 = 1;
            }

            else if(c2 == 0)
            {
                ele2 = nums[i];
                c2 = 1;
            }

            else
            {
                c1--;
                c2--;
            }
        }

        c1 = 0; c2 = 0;
        vector<int> ans;

        for(auto x : nums)
        {
            if(x == ele1)
                c1++;

            else if(x == ele2)
                c2++;
        }

        if(c1 > n/3)
            ans.push_back(ele1);
        if(c2 > n/3)
            ans.push_back(ele2);

        return ans;

    }
};
