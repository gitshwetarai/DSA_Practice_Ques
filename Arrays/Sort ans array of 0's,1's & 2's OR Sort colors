class Solution {
public:
    void sortColors(vector<int>& nums) {
        
        //sol 1. one of the approach is sorting the array.-->  T: O(nlogn), S: O(1)
        // sort(nums.begin(), nums.end());

        //sol 2. keep count of values,  t:O(n)+O(n), S: O(1)
        // int count_0 = 0, count_1 = 0, count_2 = 0;

        // for(int i=0; i<nums.size(); i++)
        // {
        //     if(nums[i]==0)
        //         count_0++;

        //     if(nums[i]==1)
        //         count_1++;

        //     if(nums[i]==2)
        //         count_2++;
        // }
        // nums.clear();
        
        // while(count_0)
        // {
        //     nums.push_back(0);
        //     count_0--;
        // }
        // while(count_1)
        // {
        //     nums.push_back(1);
        //     count_1--;
        // }
        // while(count_2)
        // {
        //     nums.push_back(2);
        //     count_2--;
        // }

        // sol. 3.--> three pointer approach,  T: O(n), S: O(1)

        int low = 0, mid = 0, high = nums.size()-1;

        while(mid <= high)
        {
            if(nums[mid] == 0)
            {
                swap(nums[low], nums[mid]);
                mid++;
                low++;
            }
            else if(nums[mid] == 1)
            {
                mid++;
            }
            else if(nums[mid] == 2)
            {
                swap(nums[mid], nums[high]);
                high--;
            }
        }
    }
};
